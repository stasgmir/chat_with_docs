import streamlit as st
from pathlib import Path
from backend.audio_processing import transcribe_audio, answer_question_from_transcript


def back_to_home():
    if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", key="back_home_audio"):
        st.session_state.mode = "üè† Home"
        st.rerun()


def Audio_QA_Session():


    back_to_home()
    st.header("üéß Chat with Audio (Docling + Whisper + OpenAI)")


    if not st.session_state.get("openai_api_key"):
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return


    uploaded_audio = st.file_uploader(
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
        type=["mp3", "wav", "m4a", "flac"]
    )

    if uploaded_audio is not None:

        with st.spinner(f"üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {uploaded_audio.name}..."):
            try:
                transcript_path = transcribe_audio(uploaded_audio.getvalue(), uploaded_audio.name)
                st.session_state["transcript_path"] = transcript_path  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                st.success(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {uploaded_audio.name}")


                with open(transcript_path, "r", encoding="utf-8") as f:
                    transcript_text = f.read()
                st.markdown("### üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞")
                st.text_area("Transcript", transcript_text[:3000], height=300)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                return


        st.markdown("---")
        question = st.text_input("üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∞—É–¥–∏–æ:")
        if question and st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
            if "transcript_path" not in st.session_state:
                st.error("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∞—É–¥–∏–æ.")
            else:
                with st.spinner("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
                    try:
                        answer = answer_question_from_transcript(
                            st.session_state["transcript_path"],
                            st.session_state.openai_api_key,
                            question
                        )
                        st.success("üß† –û—Ç–≤–µ—Ç:")
                        st.write(answer)
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
