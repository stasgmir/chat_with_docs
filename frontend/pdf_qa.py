# frontend/pdf_qa.py
import streamlit as st
import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from backend.pdf_qa_logic import process_pdf, ask_pdf_question


def back_to_home():
    if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", key="back_home_button"):
        st.session_state.mode = "üè† Home"
        st.rerun()


def PDF_QA_Session():
    if "pdf_vector_store" not in st.session_state:
        st.session_state.pdf_vector_store = None

    st.markdown("""
        <style>
        div[data-testid="stFileUploader"] > div {
            border: 2px dashed #ccc;
            border-radius: 12px;
            padding: 1rem;
            background-color: #fafafa;
        }
        </style>
    """, unsafe_allow_html=True)

    back_to_home()
    st.header("üìÑ Chat with Your PDF (OpenAI)")


    if not st.session_state.get("openai_api_key"):
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    model = st.session_state.get("selected_llm_model", "gpt-4o-mini")


    uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç", type=["pdf"])

    if uploaded_file is not None:
        with st.spinner("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF..."):
            try:
                vector_store = process_pdf(uploaded_file.getvalue(), st.session_state.openai_api_key)
                st.session_state.pdf_vector_store = vector_store
                st.success(f"‚úÖ –§–∞–π–ª **{uploaded_file.name}** –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
                st.info("–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")

    if st.session_state.get("pdf_vector_store"):
        st.subheader("üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")

        question = st.text_input(
            "–í–æ–ø—Ä–æ—Å:",
            key="pdf_question",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –≤ —ç—Ç–æ–º –æ—Ç—á—ë—Ç–µ?",
        )

        if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç") and question.strip():
            with st.spinner("ü§î –î—É–º–∞—é..."):
                try:
                    answer, docs = ask_pdf_question(
                        st.session_state.pdf_vector_store,
                        question,
                        st.session_state.openai_api_key,
                        model,
                    )

                    if not answer or not answer.strip():
                        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ PDF.")
                    else:
                        st.success("üß† –û—Ç–≤–µ—Ç:")
                        st.write(answer)

                    if docs:
                        with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏"):
                            for doc in docs:
                                st.markdown(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {doc.metadata.get('page', 'N/A')}**")
                                st.markdown(doc.page_content[:500] + "...")
                    else:
                        st.info("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

        elif st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç") and not question.strip():
            st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")

        st.markdown("---")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å PDF"):
            st.session_state.pdf_vector_store = None
            st.success("PDF –æ—á–∏—â–µ–Ω. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π.")
            st.rerun()