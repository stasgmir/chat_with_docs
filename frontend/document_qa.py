import streamlit as st
import sys, os
from langchain.vectorstores import FAISS  # –∏–ª–∏ Chroma, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏


sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from backend.document_processing import process_document, ask_document_question



def back_to_home():
    if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", key="back_home_button"):
        st.session_state.mode = "üè† Home"
        st.rerun()


def Document_QA_Session():

    if "doc_vector_store" not in st.session_state:
        st.session_state.doc_vector_store = None
        st.session_state.doc_names = []

    st.markdown("""
        <style>
        div[data-testid="stFileUploader"] > div {
            border: 2px dashed #ccc;
            border-radius: 12px;
            padding: 1rem;
            background-color: #fafafa;
        }
        </style>
    """, unsafe_allow_html=True)

    back_to_home()
    st.header("üìö Chat with Multiple Documents (Docling + OpenAI)")

    if not st.session_state.get("openai_api_key"):
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    model = st.session_state.get("selected_llm_model", "gpt-4o-mini")


    uploaded_files = st.file_uploader(
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        type=["pdf", "docx", "doc", "pptx", "ppt", "xlsx", "xls", "html", "htm", "png", "jpg"],
        accept_multiple_files=True
    )

    if uploaded_files:
        all_vectorstores = []
        with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
            for uploaded_file in uploaded_files:
                try:
                    vector_store, chunk_count = process_document(
                        uploaded_file.getvalue(),
                        uploaded_file.name,
                        st.session_state.openai_api_key
                    )
                    all_vectorstores.append(vector_store)
                    st.session_state.doc_names.append(uploaded_file.name)
                    st.success(f"‚úÖ {uploaded_file.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({chunk_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤).")

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uploaded_file.name}: {e}")


        if all_vectorstores:
            base_vs = all_vectorstores[0]
            for vs in all_vectorstores[1:]:
                base_vs.merge_from(vs)

            st.session_state.doc_vector_store = base_vs
            st.success(f"üß© –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(all_vectorstores)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")


    if st.session_state.get("doc_vector_store"):
        st.subheader(f"üí¨ –í–æ–ø—Ä–æ—Å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {', '.join(st.session_state.doc_names)}")

        question = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            key="multi_doc_question",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –≤–æ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–∞—Ö?",
        )

        if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
            if not question.strip():
                st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
            else:
                with st.spinner("ü§î –î—É–º–∞—é..."):
                    try:
                        answer, docs = ask_document_question(
                            st.session_state.doc_vector_store,
                            question,
                            st.session_state.openai_api_key,
                            model,
                        )

                        if not answer.strip():
                            st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.")
                        else:
                            st.success("üß† –û—Ç–≤–µ—Ç:")
                            st.write(answer)

                        if docs:
                            with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞)"):
                                for doc in docs:
                                    src_name = doc.metadata.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
                                    page = doc.metadata.get("page", "")
                                    st.markdown(f"**üìÑ {src_name} {('(—Å—Ç—Ä. ' + str(page) + ')') if page else ''}**")
                                    st.markdown(doc.page_content[:500] + "...")
                        else:
                            st.info("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                    except Exception as e:
                        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

        st.markdown("---")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
            st.session_state.doc_vector_store = None
            st.session_state.doc_names = []
            st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ.")
            st.rerun()
